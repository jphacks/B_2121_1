//
// RestaurantAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RestaurantAPI {

    /**
     Add a restaurant to a community
     
     - parameter id: (path)  
     - parameter addRestaurantRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func addRestaurantToCommunity(id: Int, addRestaurantRequest: AddRestaurantRequest, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            addRestaurantToCommunityWithRequestBuilder(id: id, addRestaurantRequest: addRestaurantRequest).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Add a restaurant to a community
     - POST /community/{id}/restaurants
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - parameter addRestaurantRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func addRestaurantToCommunityWithRequestBuilder(id: Int, addRestaurantRequest: AddRestaurantRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/community/{id}/restaurants"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addRestaurantRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List restaurants in a community
     
     - parameter id: (path)  
     - parameter after: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<ListCommunityRestaurantsResponse>
     */
    open class func listCommunityRestaurants(id: Int, after: Int64? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<ListCommunityRestaurantsResponse> {
        return Observable.create { observer -> Disposable in
            listCommunityRestaurantsWithRequestBuilder(id: id, after: after).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     List restaurants in a community
     - GET /community/{id}/restaurants
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - parameter after: (query)  (optional)
     - returns: RequestBuilder<ListCommunityRestaurantsResponse> 
     */
    open class func listCommunityRestaurantsWithRequestBuilder(id: Int, after: Int64? = nil) -> RequestBuilder<ListCommunityRestaurantsResponse> {
        var localVariablePath = "/community/{id}/restaurants"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListCommunityRestaurantsResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Remove a restrant from the specified community
     
     - parameter id: (path)  
     - parameter restaurantId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func removeRestaurantFromCommunity(id: Int64, restaurantId: Int64, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            removeRestaurantFromCommunityWithRequestBuilder(id: id, restaurantId: restaurantId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Remove a restrant from the specified community
     - DELETE /community/{id}/restaurants/{restaurant_id}
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - parameter restaurantId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func removeRestaurantFromCommunityWithRequestBuilder(id: Int64, restaurantId: Int64) -> RequestBuilder<Void> {
        var localVariablePath = "/community/{id}/restaurants/{restaurant_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let restaurantIdPreEscape = "\(APIHelper.mapValueToPathItem(restaurantId))"
        let restaurantIdPostEscape = restaurantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{restaurant_id}", with: restaurantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get information about the speicifed restaurant.
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Restaurant>
     */
    open class func restaurantIdGet(id: Int64, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<Restaurant> {
        return Observable.create { observer -> Disposable in
            restaurantIdGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Get information about the speicifed restaurant.
     - GET /restaurant/{id}
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - returns: RequestBuilder<Restaurant> 
     */
    open class func restaurantIdGetWithRequestBuilder(id: Int64) -> RequestBuilder<Restaurant> {
        var localVariablePath = "/restaurant/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Restaurant>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get other communities which have the secified in thier lists
     
     - parameter id: (path)  
     - parameter communityId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<GetOtherCommunityResponse>
     */
    open class func restaurantIdOtherGet(id: Int64, communityId: Int64, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<GetOtherCommunityResponse> {
        return Observable.create { observer -> Disposable in
            restaurantIdOtherGetWithRequestBuilder(id: id, communityId: communityId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Get other communities which have the secified in thier lists
     - GET /restaurant/{id}/other
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - parameter communityId: (query)  
     - returns: RequestBuilder<GetOtherCommunityResponse> 
     */
    open class func restaurantIdOtherGetWithRequestBuilder(id: Int64, communityId: Int64) -> RequestBuilder<GetOtherCommunityResponse> {
        var localVariablePath = "/restaurant/{id}/other"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "community_id": communityId.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetOtherCommunityResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Search restaurants using keyword and location
     
     - parameter keyword: (query)  
     - parameter after: (query)  (optional)
     - parameter centerLat: (query)  (optional)
     - parameter centerLng: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<SearchRestaurantResponse>
     */
    open class func searchRestaurants(keyword: String, after: Int64? = nil, centerLat: Double? = nil, centerLng: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<SearchRestaurantResponse> {
        return Observable.create { observer -> Disposable in
            searchRestaurantsWithRequestBuilder(keyword: keyword, after: after, centerLat: centerLat, centerLng: centerLng).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Search restaurants using keyword and location
     - GET /restaurant/search
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter keyword: (query)  
     - parameter after: (query)  (optional)
     - parameter centerLat: (query)  (optional)
     - parameter centerLng: (query)  (optional)
     - returns: RequestBuilder<SearchRestaurantResponse> 
     */
    open class func searchRestaurantsWithRequestBuilder(keyword: String, after: Int64? = nil, centerLat: Double? = nil, centerLng: Double? = nil) -> RequestBuilder<SearchRestaurantResponse> {
        let localVariablePath = "/restaurant/search"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "keyword": keyword.encodeToJSON(),
            "center_lat": centerLat?.encodeToJSON(),
            "center_lng": centerLng?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchRestaurantResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
