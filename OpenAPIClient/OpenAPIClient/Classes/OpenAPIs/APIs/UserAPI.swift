//
// UserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserAPI {

    /**
     Get my profile in detail
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<UserDetail>
     */
    open class func getMyProfile(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<UserDetail> {
        return Observable.create { observer -> Disposable in
            getMyProfileWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Get my profile in detail
     - GET /user/me
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - returns: RequestBuilder<UserDetail> 
     */
    open class func getMyProfileWithRequestBuilder() -> RequestBuilder<UserDetail> {
        let localVariablePath = "/user/me"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDetail>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get communities where the specified user joins
     
     - parameter id: (path)  
     - parameter after: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<ListUserCommunityResponse>
     */
    open class func listUserCommunities(id: Int64, after: Int64? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<ListUserCommunityResponse> {
        return Observable.create { observer -> Disposable in
            listUserCommunitiesWithRequestBuilder(id: id, after: after).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Get communities where the specified user joins
     - GET /user/{id}/communities
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - parameter after: (query)  (optional)
     - returns: RequestBuilder<ListUserCommunityResponse> 
     */
    open class func listUserCommunitiesWithRequestBuilder(id: Int64, after: Int64? = nil) -> RequestBuilder<ListUserCommunityResponse> {
        var localVariablePath = "/user/{id}/communities"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListUserCommunityResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create a new user
     
     - parameter createUserRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<CreateUserResponse>
     */
    open class func newUser(createUserRequest: CreateUserRequest, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<CreateUserResponse> {
        return Observable.create { observer -> Disposable in
            newUserWithRequestBuilder(createUserRequest: createUserRequest).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Create a new user
     - POST /user
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter createUserRequest: (body)  
     - returns: RequestBuilder<CreateUserResponse> 
     */
    open class func newUserWithRequestBuilder(createUserRequest: CreateUserRequest) -> RequestBuilder<CreateUserResponse> {
        let localVariablePath = "/user"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateUserResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<UploadImageProfileResponse>
     */
    open class func uploadProfileImage(body: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<UploadImageProfileResponse> {
        return Observable.create { observer -> Disposable in
            uploadProfileImageWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     - POST /user/profile
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<UploadImageProfileResponse> 
     */
    open class func uploadProfileImageWithRequestBuilder(body: URL? = nil) -> RequestBuilder<UploadImageProfileResponse> {
        let localVariablePath = "/user/profile"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UploadImageProfileResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
