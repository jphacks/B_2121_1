//
// BookmarkAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BookmarkAPI {

    /**
     Delete bookmark from the specified user
     
     - parameter id: (path)  
     - parameter communityId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func userIdBookmarkCommunityIdDelete(id: Int64, communityId: Int64, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            userIdBookmarkCommunityIdDeleteWithRequestBuilder(id: id, communityId: communityId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Delete bookmark from the specified user
     - DELETE /user/{id}/bookmark/{community_id}
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - parameter communityId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func userIdBookmarkCommunityIdDeleteWithRequestBuilder(id: Int64, communityId: Int64) -> RequestBuilder<Void> {
        var localVariablePath = "/user/{id}/bookmark/{community_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let communityIdPreEscape = "\(APIHelper.mapValueToPathItem(communityId))"
        let communityIdPostEscape = communityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{community_id}", with: communityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get bookmarking list of the specified user
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<ListUserBookmarkResponse>
     */
    open class func userIdBookmarkGet(id: Int64, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<ListUserBookmarkResponse> {
        return Observable.create { observer -> Disposable in
            userIdBookmarkGetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Get bookmarking list of the specified user
     - GET /user/{id}/bookmark
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - returns: RequestBuilder<ListUserBookmarkResponse> 
     */
    open class func userIdBookmarkGetWithRequestBuilder(id: Int64) -> RequestBuilder<ListUserBookmarkResponse> {
        var localVariablePath = "/user/{id}/bookmark"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListUserBookmarkResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create a new bookmark
     
     - parameter id: (path)  
     - parameter inlineObject1: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Void>
     */
    open class func userIdBookmarkPost(id: Int64, inlineObject1: InlineObject1, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            userIdBookmarkPostWithRequestBuilder(id: id, inlineObject1: inlineObject1).execute(apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    observer.onNext(())
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Create a new bookmark
     - POST /user/{id}/bookmark
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - parameter inlineObject1: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func userIdBookmarkPostWithRequestBuilder(id: Int64, inlineObject1: InlineObject1) -> RequestBuilder<Void> {
        var localVariablePath = "/user/{id}/bookmark"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject1)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
