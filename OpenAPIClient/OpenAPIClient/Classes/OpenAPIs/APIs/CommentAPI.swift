//
// CommentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RxSwift
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CommentAPI {

    /**
     Get private comments for a restaurant
     
     - parameter id: (path)  
     - parameter restaurantId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<[Comment]>
     */
    open class func getRestaurantComment(id: Int, restaurantId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<[Comment]> {
        return Observable.create { observer -> Disposable in
            getRestaurantCommentWithRequestBuilder(id: id, restaurantId: restaurantId).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Get private comments for a restaurant
     - GET /community/{id}/restaurants/{restaurant_id}/comments
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - parameter restaurantId: (path)  
     - returns: RequestBuilder<[Comment]> 
     */
    open class func getRestaurantCommentWithRequestBuilder(id: Int, restaurantId: Int) -> RequestBuilder<[Comment]> {
        var localVariablePath = "/community/{id}/restaurants/{restaurant_id}/comments"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let restaurantIdPreEscape = "\(APIHelper.mapValueToPathItem(restaurantId))"
        let restaurantIdPostEscape = restaurantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{restaurant_id}", with: restaurantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Comment]>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update comment of the restaurant
     
     - parameter id: (path)  
     - parameter restaurantId: (path)  
     - parameter updateCommentRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Observable<Comment>
     */
    open class func updateRestaurantComment(id: Int, restaurantId: Int, updateCommentRequest: UpdateCommentRequest, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue) -> Observable<Comment> {
        return Observable.create { observer -> Disposable in
            updateRestaurantCommentWithRequestBuilder(id: id, restaurantId: restaurantId, updateCommentRequest: updateCommentRequest).execute(apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    observer.onNext(response.body!)
                case let .failure(error):
                    observer.onError(error)
                }
                observer.onCompleted()
            }
            return Disposables.create()
        }
    }

    /**
     Update comment of the restaurant
     - PUT /community/{id}/restaurants/{restaurant_id}/comments
     - API Key:
       - type: apiKey Authorization 
       - name: token
     - parameter id: (path)  
     - parameter restaurantId: (path)  
     - parameter updateCommentRequest: (body)  
     - returns: RequestBuilder<Comment> 
     */
    open class func updateRestaurantCommentWithRequestBuilder(id: Int, restaurantId: Int, updateCommentRequest: UpdateCommentRequest) -> RequestBuilder<Comment> {
        var localVariablePath = "/community/{id}/restaurants/{restaurant_id}/comments"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let restaurantIdPreEscape = "\(APIHelper.mapValueToPathItem(restaurantId))"
        let restaurantIdPostEscape = restaurantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{restaurant_id}", with: restaurantIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateCommentRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Comment>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
